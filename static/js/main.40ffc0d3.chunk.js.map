{"version":3,"sources":["components/Loader.tsx","services/api/calls.ts","store/auth.ts","components/login-form/LoginForm.tsx","hoc/auth-provider/AuthProvider.tsx","store/sections.ts","store/navigation.ts","components/layout/Layout.tsx","hoc/withPathReader.tsx","_mock.ts","utils/dataset.tsx","components/fields/Dataset.tsx","components/fields/FieldWrapper.tsx","components/pages/Edit.tsx","components/pages/Publish.tsx","components/pages/Schedule.tsx","components/pages/Files.tsx","components/App.tsx","index.tsx"],"names":["styled","css","position","backgroundColor","inset","width","height","zIndex","top","left","translate","API_URL","fetchFunc","fetch","fetchSections","a","response","json","obtainToken","username","password","getRequestOptions","refreshToken","token","method","payload","auth","mode","cache","credentials","redirect","referrerPolicy","body","JSON","stringify","headers","useAuthStore","getState","authToken","create","set","get","isFetching","isAuthenticated","undefined","remember","onError","result","window","localStorage","setItem","retrieveToken","getItem","state","removeItem","signOut","minHeight","flexDirection","display","justifyContent","alignItems","minWidth","AuthProvider","children","useEffect","sections","getSections","update","sectionId","screenId","page","Layout","useNavigationStore","useSectionsStore","useState","openKeys","setOpenKeys","selectedKeys","setSelectedKeys","console","log","onOpenChange","useCallback","keys","rootKeys","map","section","String","id","latestOpenKey","find","key","indexOf","Container","param","Header","style","color","fontSize","fontWeight","Sider","collapsible","collapsedWidth","borderRight","title","ItemGroup","SubMenu","icon","RightSquareOutlined","name","EditOutlined","screens","screen","Item","ProjectOutlined","to","ExportOutlined","CalendarOutlined","FolderOutlined","Divider","Content","Styled","maxWidth","overflow","PureContainer","withPathReader","WrappedComponent","props","useParams","useLocation","pathname","split","store","getDataset","schema","players_schema","data","players","games_schema","games","teams_schema","teams","FIELD_TYPE","title_field","__name","__type","CTA_field","__items","__options","__source","Cell","type","options","defaultValue","value","isEditing","setIsEditing","setValue","inputRef","useRef","hitarea","useMemo","onClick","current","focus","onPressEnter","e","target","IMAGE","src","visible","onCancel","FILE","COLOR","gap","onOk","onChange","val","hex","onChangeComplete","STRING","ref","onBlur","NUMBER","DATE","defaultOpen","moment","newValue","format","option","Option","Dataset","isNested","selectedIds","multiple","subtable","setSubtable","selectedRowKeys","setSelectedRowKeys","dataSource","filter","row","i","columns","expand","column","_","dataIndex","fixed","render","sorter","b","localeCompare","sortDirections","FOREIGN","FOREIGNS","values","record","push","onConfirm","danger","DeleteOutlined","generateColumns","ids","parentId","disabled","Table","pagination","rowSelection","scroll","scrollToFirstRowOnChange","y","size","padding","marginTop","marginBottom","border","borderRadius","FieldWrapper","attachable","isAttached","setIsAttached","prev","getFieldByType","placeholder","Anchor","Link","gridTemplateColumns","m","prop","global","fieldsGlobal","fieldsLocal","field","length","App","element","path","ReactDOM","StrictMode","document","getElementById"],"mappings":"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AEX,CACID,OAAO,WACPC,OAAO,SACPG,UAAU,CAAC,KAAM,KAAM,MAAO,KAAM,KAAM,KAAM,MAAO,IAAK,IAAK,OAGrE,CACIJ,OAAO,SACPC,OAAO,UAEX,CACID,OAAO,SACPC,OAAO,UAEX,CACID,OAAO,SACPC,OAAO,UAEX,CACID,OAAO,UACPC,OAAO,UAMX,CACID,OAAO,WACPC,OAAO,QAEX,CACID,OAAO,WACPC,OAAO,UAIX,CACID,OAAO,YACPC,OAAO,UAEX,CACID,OAAO,YACPC,OAAO,UAGX,CACID,OAAO,aACPC,OAAO,UAEX,CACID,OAAO,aACPC,OAAO,UAMX,CACID,OAAO,cACPC,OAAO,UAEX,CACID,OAAO,cACPC,OAAO,SAEX,CACID,OAAO,cACPC,OAAO,UAEX,CACID,OAAO,cACPC,OAAO,UAEX,CACID,OAAO,eACPC,OAAO,UAEX,CACID,OAAO,eACPC,OAAO,UAEX,CACID,OAAO,eACPC,OAAO,UAEX,CACID,OAAO,iBACPC,OAAO,UAEX,CACID,OAAO,kBACPC,OAAO,UAEX,CACID,OAAO,mBACPC,OAAO,UAEX,CACID,OAAO,QACPC,OAAO,WACPI,SAAS,SAEb,CACIL,OAAO,OACPC,OAAO,UACPI,SAAS,YAKRT,GAAsB,CAC/BI,OAAO,QACPC,OAAO,QACPE,QAAQ,CACJF,OAAO,SACPD,OAAO,MACPG,QAAQ,CAAC,CACLH,OAAO,KACPC,OAAO,UAEX,CACID,OAAO,OACPC,OAAO,UAEX,CACID,OAAO,OACPC,OAAO,UAEX,CACID,OAAO,OACPC,OAAO,SAEX,CACID,OAAO,eACPC,OAAO,UAEX,CACID,OAAO,gBACPC,OAAO,SAEX,CACID,OAAO,kBACPC,OAAO,YAKNP,GAAsB,CAC/BM,OAAO,QACPC,OAAO,QACPE,QAAQ,CACJF,OAAO,SACPD,OAAO,MACPG,QAAQ,CAAC,CACLH,OAAO,KACPC,OAAO,UAEX,CACID,OAAO,SACPC,OAAO,UAEX,CACID,OAAO,UACPC,OAAO,UAEX,CACID,OAAO,WACPC,OAAO,QAEX,CACID,OAAO,WACPC,OAAO,UAEX,CACI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","file":"static/js/main.40ffc0d3.chunk.js","sourcesContent":["import { iChildren } from \"types\";\nimport styled from '@emotion/styled'\nimport {css} from '@styled-system/css'\nimport PulseLoader from \"react-spinners/PulseLoader\";\n\ninterface LoaderProps {\n    isLoading:boolean\n}\n\nexport default function Loader({isLoading, children}:LoaderProps & iChildren){\n    return isLoading \n        ? <Styled.Container>\n            {children}\n            <div id='overlay'>\n                <div id='info'>\n                    <PulseLoader color='#1890ff' size={10}/>\n                </div> \n            </div>\n        </Styled.Container>\n        : <>{children}</>\n}\n\n\nconst Styled = {\n    Container: styled('div')(css({\n        position:'relative',\n        \"#overlay\":{\n            backgroundColor:'#ffffffdd',\n            position:'absolute',\n            inset:0,\n            width:'100%',\n            height:'100%',\n            zIndex:99,\n            \"#info\":{\n                position:'absolute',\n                top:\"50%\",\n                left:'50%',\n                translate: \"transformX(-50%)\",\n            }\n        }\n    }))\n}","import fakeFetch from \"./mock/fake-fetch\";\nimport { Section } from \"./types\";\nimport useAuthStore from 'store/auth'\n\nconst API_URL = 'https://central.ucms.site/api'\nconst fetchFunc = process.env.NODE_ENV === 'development' \n    ? fakeFetch \n    : fetch\n\n\nexport async function fetchSections() {\n    const response = await fetchFunc('api/sections')\n    return await response.json() as Section[]\n}\n\n// tokens\n\nexport async function obtainToken(username:string, password:string) {\n    //const response = await fetchFunc(`${API_URL}/jwt/obtain-token`)\n    const response = await fetch(`${API_URL}/jwt/obtain-token`, getRequestOptions('POST', {username, password}))\n    return await response.json()\n}\n\nexport async function refreshToken(token:string) {\n    //const response = await fetchFunc(`${API_URL}/jwt/obtain-token`)\n    const response = await fetch(`${API_URL}/jwt/refresh-token`, getRequestOptions('POST', {token}))\n    return await response.json()\n}\n\n\n// content\n\nexport async function contentModule(instance:number) {\n    const response = await fetch(`${API_URL}/content/content-module/${instance}/7163/7165/`, getRequestOptions('GET', undefined, true))\n    return await response.json()\n}\n\nexport async function contentNode(instance:number) {\n    const response = await fetch(`${API_URL}/content/content-node/${instance}/7163/7165/`, getRequestOptions('GET', undefined, true))\n    return await response.json()\n}\n\nexport async function getInstances() {\n    const response = await fetch(`${API_URL}/content/instance`, getRequestOptions('GET', undefined, true))\n    return await response.json()\n}\n\n\n\n/// utils\n\nfunction getRequestOptions(method:'GET'|'POST'|'PATCH' = 'GET', payload?:{[key:string]:any}, auth = false){\n    return {\n        method,\n        mode: 'cors',\n        cache: 'no-cache',\n        credentials: 'same-origin', \n        redirect: 'follow', \n        referrerPolicy: 'no-referrer',\n        ...(payload && {body: JSON.stringify(payload) }),\n        ...((auth || payload) && {\n            headers:{\n                ...(auth && {\"Authorization\": `JWT ${useAuthStore.getState().authToken}`}),\n                ...(payload && {'Content-Type': 'application/json'})\n            } \n        })\n    } as RequestInit\n}","import { obtainToken, refreshToken } from 'services/api/calls';\nimport create from 'zustand'\n\ntype TAuthStore = {\n    username?:string\n    authToken?:string\n    isFetching:boolean\n    // computed\n    isAuthenticated:() => boolean\n    // methods\n    obtainToken:(username:string, password:string, remember:boolean, onError:(error:any) => void) => void\n    retrieveToken:() => void\n    signOut:() => void\n};\n\nexport default create<TAuthStore>((set, get) => ({\n    isFetching:false,\n    // comupted\n    isAuthenticated: () => {\n        const state = get()\n        return state.authToken !== undefined\n    },\n    // methods\n    obtainToken: async (username, password, remember, onError) => {\n        set({isFetching:true})\n        try{\n            const result = await obtainToken(username, password)\n            if(result.token){\n                set(({authToken:result.token, username, isFetching:false}))\n                if(remember){\n                    window?.localStorage.setItem('authToken', result.token)\n                    window?.localStorage.setItem('username', username)\n                }\n            }\n            else{\n                set({isFetching:false})\n                onError(result)\n            } \n        }\n        catch(e){\n            set({isFetching:false})\n            onError(e)\n        }\n    },\n    retrieveToken: async () => {\n        const authToken = window?.localStorage.getItem('authToken')\n        const username = window?.localStorage.getItem('username')\n        if(authToken && username){\n            set({isFetching:true})\n            const result = await refreshToken(authToken)\n            if(result.token){\n                set(state => ({...state, authToken:result.token, username, isFetching:false}))\n            }else{\n                set({username:undefined, authToken:undefined, isFetching:false})\n                window?.localStorage.removeItem('authToken')\n                window?.localStorage.removeItem('username')\n            }\n        }\n    }, \n    signOut:() => {\n        set({username:undefined, authToken:undefined})\n        window?.localStorage.removeItem('authToken')\n        window?.localStorage.removeItem('username')\n    }\n    \n}))","import Loader from 'components/Loader';\nimport styled from '@emotion/styled'\nimport useAuthStore from 'store/auth'\nimport { Form, Input, Button, Checkbox, message } from 'antd';\nimport { css } from '@styled-system/css'\n\n\nexport default function LoginForm() {\n    const isFetching = useAuthStore(state => state.isFetching)\n    const obtainToken = useAuthStore(state => state.obtainToken)\n\n    const onSubmit = (values: any) => {\n        const {username, password, remember} = values\n        obtainToken(username, password, remember, (error:any) => message.error(\"ERROR: \" + JSON.stringify(error)))\n    }\n\n    return (\n        <Styled.Container>\n            <Loader isLoading={isFetching}>\n                <Form\n                    autoComplete=\"off\"\n                    initialValues={{ remember: true }}\n                    labelCol={{ span: 8 }}\n                    name=\"basic\"\n                    wrapperCol={{ span: 16 }}\n                    onFinish={onSubmit}\n                >\n                    <Form.Item\n                        label=\"Username\"\n                        name=\"username\"\n                        rules={[{ required: true, message: 'Please input your username!' }]}\n                    >\n                        <Input />\n                    </Form.Item>\n                    <Form.Item\n                        label=\"Password\"\n                        name=\"password\"\n                        rules={[{ required: true, message: 'Please input your password!' }]}\n                    >\n                        <Input.Password />\n                    </Form.Item>\n                    <Form.Item name=\"remember\" valuePropName=\"checked\" wrapperCol={{ offset: 8, span: 16 }}>\n                        <Checkbox>Remember me</Checkbox>\n                    </Form.Item>\n                    <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\n                        <Button htmlType=\"submit\" type=\"primary\">Submit</Button>\n                    </Form.Item>\n                </Form>\n            </Loader>\n        </Styled.Container >\n    )\n}\n\nconst Styled = {\n    Container: styled('div')(css({\n        width:'100%',\n        minHeight:'360px',\n        flexDirection:'column',\n        display:'flex',\n        justifyContent:'center',\n        alignItems:'center',\n        \"> form\":{\n            minWidth:'400px'\n        }\n    })),\n}","import LoginForm from 'components/login-form/LoginForm'\nimport { useEffect } from 'react'\nimport useAuthStore from 'store/auth'\nimport { iChildren } from 'types'\n\n\nexport default function AuthProvider({children}:iChildren){\n    const isAuthenticated = true//useAuthStore(state => state.isAuthenticated())\n    const isFetching = useAuthStore(state => state.isFetching)\n    const retrieveToken = useAuthStore(state => state.retrieveToken)\n\n    \n    useEffect(() => {\n        retrieveToken()\n    }, [])\n    \n    return isAuthenticated\n        ? children\n        : isFetching \n            ? <>Retriving session...</>\n            : <LoginForm/>\n}\n","import { fetchSections } from 'services/api/calls';\nimport type { Section } from 'services/api/types';\nimport create from 'zustand'\n\ntype TStore = {\n    sections?: Section[]\n    isFetching:boolean\n    fetch:() => void\n    getSections:() => Section[] | undefined\n};\n\nexport default create<TStore>((set, get) => ({\n    isFetching:false,\n    fetch: async () => {\n        set({isFetching:true})\n        set({sections:await fetchSections() , isFetching:false })\n    }, \n    getSections:() => {\n        const state = get()\n        if(!state.sections && !state.isFetching){\n            state.fetch()\n        }\n        return state.sections\n    }\n}))\n\n\n\n","import create from 'zustand'\n\ntype TStore = {\n    sectionId?:string\n    screenId?:string\n    page?:string\n    update:(sectionId?:string, screenId?:string, page?:string) => void\n};\n\nexport default create<TStore>((set) => ({\n    update: (sectionId?:string, screenId?:string, page?:string) => set({sectionId, screenId, page}),\n}))","import * as Ant from 'antd';\nimport styled from '@emotion/styled'\nimport { iChildren } from 'types'\nimport { css } from '@styled-system/css'\nimport { RightSquareOutlined, FolderOutlined, CalendarOutlined, EditOutlined, ExportOutlined, ProjectOutlined } from '@ant-design/icons';\nimport useSectionsStore from 'store/sections'\nimport { useCallback, useEffect, useState } from 'react';\nimport { contentModule, contentNode, getInstances } from 'services/api/calls';\nimport { Link, useParams, matchPath } from \"react-router-dom\";\nimport useNavigationStore from 'store/navigation'\n\n\n\n\nexport default function Layout({ children }: iChildren) {\n    const {sectionId, screenId, page}  = useNavigationStore()\n\n\n    const sections = useSectionsStore(state => state.getSections())\n    const [openKeys, setOpenKeys] = useState<string[]>([]);\n    const [selectedKeys, setSelectedKeys] = useState<string[]>([]);\n    const [sample, setSample] = useState()\n\n    useEffect(() => {\n        console.log(sectionId, screenId, page)\n        if(sectionId !== undefined){\n            if(page !== undefined){\n                if(screenId !== undefined){\n                    setSelectedKeys([`${sectionId}-${page}-${screenId}`])  \n                }\n                else{\n                    setSelectedKeys([`${sectionId}-${page}`])  \n                }\n                \n                setOpenKeys([sectionId, `${sectionId}-${page}`])  \n                \n                \n            }\n            else{\n                setOpenKeys([sectionId]) \n            }\n        }\n        else {\n            if(page !== undefined){\n                setOpenKeys([])\n                setSelectedKeys([`global-${page}`])\n            }\n        }\n\n    }, [sectionId, screenId, page])\n\n\n    const onOpenChange = useCallback((keys:string[]) => {\n        const rootKeys = sections?.map(section => String(section.id))\n        const latestOpenKey = keys.find(key => openKeys.indexOf(key) === -1);\n        \n        if (latestOpenKey && rootKeys?.indexOf(latestOpenKey) === -1) {\n            setOpenKeys(keys);\n        } else {\n            setOpenKeys(latestOpenKey ? [latestOpenKey] : []);\n        }\n\n    },[openKeys, sections])\n\n    async function test() {\n        //const result = await getInstances()\n        const result = await contentNode(92)\n        setSample(result)\n        console.log(result)\n    }\n\n    return (\n        <Styled.Container param={'test'}>\n            \n            <Ant.Layout.Header>\n                <span style={{color:'white', fontSize:'18px', fontWeight:'bold'}}>\n                   Kansas City Chiefs \n                </span>\n                \n            </Ant.Layout.Header>\n\n            <Ant.Layout>\n                <Ant.Layout.Sider collapsible={true} collapsedWidth={60} width={300}>\n                    <Ant.Menu\n                        mode=\"inline\"\n                        openKeys={openKeys}\n                        selectedKeys={selectedKeys}\n                        style={{ height: '100%', borderRight: 0 }}\n                        title='sections'\n                        onOpenChange={onOpenChange}\n                    >\n                        <Ant.Menu.ItemGroup title='Sections'>\n                            {sections?.map(section =>\n                                <Ant.Menu.SubMenu icon={<RightSquareOutlined />} key={section.id} title={section.name}>\n                                    <Ant.Menu.SubMenu icon={<EditOutlined />} key={`${section.id}-edit`} title='Edit'>\n                                        {section.screens.map(screen =>\n                                            <Ant.Menu.Item icon={<ProjectOutlined />} key={`${section.id}-edit-${screen.id}`}>\n                                                <Link to={`${section.id}/edit/${screen.id}`}>{screen.name}</Link>\n                                            </Ant.Menu.Item>\n                                        )}\n                                    </Ant.Menu.SubMenu>\n                                    <Ant.Menu.Item icon={<ExportOutlined />} key={`${section.id}-publish`}>\n                                        <Link to={`${section.id}/publish`}>Publish</Link>\n                                    </Ant.Menu.Item>\n                                    <Ant.Menu.Item icon={<CalendarOutlined />} key={`${section.id}-schedule`}>\n                                        <Link to={`${section.id}/schedule`}>Schedule</Link>\n                                    </Ant.Menu.Item>\n                                    <Ant.Menu.Item icon={<FolderOutlined />} key={`${section.id}-files`}>\n                                        <Link to={`${section.id}/files`}>Files</Link>\n                                    </Ant.Menu.Item>\n                                </Ant.Menu.SubMenu>\n                            )}\n                        </Ant.Menu.ItemGroup>\n                        <Ant.Menu.Divider />\n                        <Ant.Menu.ItemGroup title='Global'>\n                            <Ant.Menu.Item icon={<FolderOutlined />} key=\"global-files\">\n                                <Link to={`files`}>Files</Link>\n                            </Ant.Menu.Item>\n                            <Ant.Menu.Item icon={<EditOutlined />} key=\"global-data\" title='Edit'>\n                                <Link to={`data`}>Data</Link>\n                            </Ant.Menu.Item>\n                        </Ant.Menu.ItemGroup>\n                    </Ant.Menu>\n                </Ant.Layout.Sider>\n                <Ant.Layout>\n                    <Styled.Content>\n                        {children}\n                        {/*\n                        <button onClick={test}>test</button>\n                        <pre>\n                            {JSON.stringify(sample,null, 2)}\n                        </pre>\n                        */}\n                        \n                    </Styled.Content>\n                </Ant.Layout>\n            </Ant.Layout>\n\n\n        </Styled.Container>\n    )\n}\n\nconst Styled = {\n    Container: styled('div')(({ param }: { param: string }) => css({\n        minHeight: '100vh',\n        display: 'flex',\n        flexDirection: 'column',\n        maxWidth:'100vw',\n        overflow:'scroll',\n    })),\n    PureContainer: styled('div')(css({\n\n    })),\n    Content: styled('div')(css({\n        position:'relative',\n        inset:0\n    }))\n}\n","import { useEffect } from \"react\";\nimport { useParams, useLocation } from \"react-router-dom\"\nimport useNavigationStore from 'store/navigation'\n\nconst withPathReader = (WrappedComponent:(props:any)=>JSX.Element) => (props:any) => {\n    const {sectionId, screenId} = useParams()\n    const page = (sectionId !== undefined && screenId !== undefined)\n        ? useLocation().pathname.split('/')[2]\n        : useLocation().pathname.split('/')[1]\n    const update = useNavigationStore(store => store.update)\n\n    useEffect(() => {\n        update(sectionId, screenId, page)\n    }, [sectionId, screenId, page])\n\n    return <WrappedComponent/>\n    \n};\n\nexport default withPathReader\n\n \n\n","import players from 'services/api/mock/players.json'\nimport games from 'services/api/mock/games.json'\nimport teams from 'services/api/mock/teams.json'\n\nexport function getDataset(name:string){\n    switch(name){\n        case 'players':\n            return {schema:players_schema, data:players}\n        case 'games':\n            return {schema:games_schema, data:games}\n        case 'teams':\n            return {schema:teams_schema, data:teams}\n    }\n}\n\n\nexport const title_field = {\n    schema:{\n        __name:'Title',\n        __type:'string'\n    },\n    data:'Sample-title'\n}\n\nexport const CTA_field = {\n    schema:{\n        __name:'CTA',\n        __type:'string'\n    },\n    data:'Touch to explore'\n}\n/*\n// plain field\nconst plain_field_schema = {\n    __name:'field-name',\n    __type:'string'\n}\n\n// object field\nconst object_field_schema = {\n    __name:'field-name',\n    __type:'object',\n    __items:[\n        {\n            __name:'object-property-name',\n            __type:'string'\n        }\n    ]\n}\n\n// array of ..\nconst array_field_schema = {\n    __name:'field-name',\n    __type:'array',\n    __items:{\n        __type:'string'\n    }\n}\n*/\n\nexport const players_schema:Schema = {\n    __name:'Players',\n    __type:'array',\n    __items:{\n        __type:'object',\n        __name:'any',\n        __items:[{\n            __name:'id',\n            __type:'number'\n        },\n        {\n            __name:'firstName',\n            __type:'string'\n        },\n        {\n            __name:'lastName',\n            __type:'string'\n        },\n        /*\n        {\n            __name:'media',\n            __type:'file'\n        },\n        */\n        {\n            __name:'photo',\n            __type:'image'\n        },\n        {\n            __name:'position',\n            __type:'string',\n            __options:['LB', 'QB', 'G/T', 'DT', 'WR', 'DE', 'C/G', 'G', 'S', 'RB']\n        },\n        \n        {\n            __name:'number',\n            __type:'number'\n        },\n        {\n            __name:'height',\n            __type:'string'\n        },\n        {\n            __name:'weight',\n            __type:'number'\n        },\n        {\n            __name:'college',\n            __type:'string'\n        },/*\n        {\n            __name:'bornCity',\n            __type:'string'\n        },*/\n        {\n            __name:'bornDate',\n            __type:'date'\n        },\n        {\n            __name:'homeTown',\n            __type:'string'\n        },\n        \n        \n        {\n            __name:'draftTeam',\n            __type:'string'\n        },\n        {\n            __name:'draftYear',\n            __type:'string'\n        },\n        \n        {\n            __name:'alsoPlayed',\n            __type:'string'\n        },\n        {\n            __name:'personType',\n            __type:'string'\n        },/*\n        {\n            __name:'careerStats',\n            __type:'string'\n        },*/\n        {\n            __name:'gamesPlayed',\n            __type:'number'\n        },\n        {\n            __name:'headerImage',\n            __type:'image'\n        },\n        {\n            __name:'howAcquired',\n            __type:'string'\n        },\n        {\n            __name:'yearsPlayed',\n            __type:'string'\n        },\n        {\n            __name:'draftedRound',\n            __type:'number'\n        },\n        {\n            __name:'gamesStarted',\n            __type:'number'\n        },\n        {\n            __name:'yearsStarted',\n            __type:'string'\n        },\n        {\n            __name:'draftedOverall',\n            __type:'number'\n        },\n        {\n            __name:'firstYearChiefs',\n            __type:'number'\n        },\n        {\n            __name:'careerHighlights',\n            __type:'string'\n        },\n        {\n            __name:'games',\n            __type:'foreigns',\n            __source:'games'\n        },\n        {\n            __name:'team',\n            __type:'foreign',\n            __source:'teams'\n        }]\n    }\n}\n\nexport const teams_schema:Schema = {\n    __name:'Teams',\n    __type:'array',\n    __items:{\n        __type:'object',\n        __name:'any',\n        __items:[{\n            __name:'id',\n            __type:'number'\n        },\n        {\n            __name:'city',\n            __type:'string'\n        },\n        {\n            __name:'name',\n            __type:'string'\n        },\n        {\n            __name:'logo',\n            __type:'image'\n        },\n        {\n            __name:'abbreviation',\n            __type:'string'\n        },\n        {\n            __name:'primaryColour',\n            __type:'color'\n        },\n        {\n            __name:'secondaryColour',\n            __type:'color'\n        }]\n    }\n}\n\nexport const games_schema:Schema = {\n    __name:'Games',\n    __type:'array',\n    __items:{\n        __type:'object',\n        __name:'any',\n        __items:[{\n            __name:'id',\n            __type:'number'\n        },\n        {\n            __name:'season',\n            __type:'string'\n        },\n        {\n            __name:'stadium',\n            __type:'string'\n        },\n        {\n            __name:'gameDate',\n            __type:'date'\n        },\n        {\n            __name:'homeTeam',\n            __type:'string'\n        },\n        {\n            __name:'attendance',\n            __type:'number'\n        },\n        {\n            __name:'gameNumber',\n            __type:'number'\n        },\n        {\n            __name:'stadiumImage',\n            __type:'image'\n        }]\n    }\n}\n\n\n\n\n\n\n\nexport type Schema = {\n    __type:'string' | 'number' | 'array' | 'object' | 'foreign' | 'foreigns' | string,\n    __name:string,\n    __items?:Schema | Schema[],\n    __source?:string\n    __options?:any[]\n\n};","import { ColumnsType, ColumnType } from \"antd/lib/table\";\nimport { Schema } from \"_mock\";\nimport * as _ from 'lodash';\nimport { Input, InputNumber, Modal, Select, DatePicker, Popconfirm, Button } from \"antd\";\nimport { SyntheticEvent, useEffect, useMemo, useRef, useState } from \"react\";\nimport moment, { Moment } from \"moment\";\nimport { ChromePicker } from 'react-color';\nimport Item from \"antd/lib/list/Item\";\nimport { DeleteOutlined } from '@ant-design/icons';\n\ninterface DatasetSchema {\n    __items:{\n        __type:'object'\n        __items:Schema[]\n    }\n}\n\nenum FIELD_TYPE {\n    ARRAY = 'array',\n    COLOR = 'color',\n    DATE = 'date',\n    FILE = 'file',\n    FILES = 'files',\n    FOLDER = 'folder',\n    FOREIGN = 'foreign',\n    FOREIGNS = 'foreigns',\n    IMAGE = 'image',\n    NUMBER = 'number',\n    OBJECT = 'object',\n    STRING = 'string',\n}\n\ntype RecordField<T> = {\n    [key:string]:T\n}\n\n\nexport default function generateColumns(schema:DatasetSchema, expand:(name:string, ids:number[], parentId:number, multiple:boolean) => void, isNested:boolean){\n    const columns:ColumnsType<any> = schema.__items.__items\n        .map((column) => {\n            let result:ColumnType<any> = {\n                title:_.startCase(column.__name),\n                dataIndex:column.__name,\n                key:column.__name, \n                width:(column.__name === 'id') ? 80 : 120,\n                fixed:(column.__name === 'id') ? 'left' : undefined,\n                render:(column.__name !== 'id') ? (value:string) => <Cell options={column.__options} type={column.__type as FIELD_TYPE} value={value}/> : undefined\n            }\n\n            switch (column.__type){\n                case FIELD_TYPE.STRING:\n                    result = {\n                        ...result,\n                        sorter: (a:RecordField<string>, b:RecordField<string>) => a[column.__name].localeCompare(b[column.__name]),\n                        sortDirections: ['ascend', 'descend'],\n                    };\n                    break;\n                case FIELD_TYPE.NUMBER:\n                    result = {\n                        ...result,\n                        sorter: (a:RecordField<number>, b:RecordField<number>) => a[column.__name] > b[column.__name] ? 1 : -1,\n                        sortDirections: ['ascend', 'descend'],\n                    }\n                    break;\n                case FIELD_TYPE.DATE:\n                    result = {\n                        ...result,\n                        width:140\n                        //sorter: (a:RecordField<number>, b:RecordField<number>) => a[item.__name] > b[item.__name] ? 1 : -1,\n                        //sortDirections: ['ascend', 'descend'],\n                    }\n                    break;\n                case FIELD_TYPE.IMAGE:\n                    result = {\n                        ...result,\n                    }\n                    break;\n                case FIELD_TYPE.FOREIGN: case FIELD_TYPE.FOREIGNS:\n                    result = {\n                        ...result,\n                        width:80,\n                        fixed:'right',\n                        render:(values:number[]|undefined, record:any) => \n                            <div onClick={() => {console.log(record); expand(column.__source as string, values || [], record.id, column.__type === FIELD_TYPE.FOREIGNS)}}><a>Show</a></div>,\n                    }\n                    break;\n               \n\n\n            }\n            \n            return result\n        })\n        \n    if(!isNested){\n        columns.push({\n            title: '',\n            dataIndex: '',\n            key: 'x',\n            width:60,\n            fixed:'right',\n            render: (_, record:any) => <Popconfirm title=\"Sure to delete?\" onConfirm={() => console.log('remove', record)}>\n                <Button danger type='link'><DeleteOutlined /></Button>\n            </Popconfirm>,\n        })\n    }\n\n    return columns\n}\n\n\nconst Cell = ({type, options, value:defaultValue}:{type:FIELD_TYPE, options?:(string | number)[], value:any}) => {\n    const [isEditing, setIsEditing] = useState(false)\n    const [value, setValue] = useState(defaultValue)\n    const inputRef = useRef<any>(null);\n    const hitarea = useMemo(() => <div style={{position:'absolute', inset:0}} onClick={() => setIsEditing(true)}/>, [])\n    \n    useEffect(() => {\n        if (isEditing) {\n            inputRef.current?.focus();\n        }\n    }, [isEditing]);\n\n    const onPressEnter = (e:SyntheticEvent) => {\n        setValue((e.target as unknown as {value:any}).value)\n        setIsEditing(false)\n    }\n\n    const onChange = (newValue:any) => {\n        setValue(newValue)\n        setIsEditing(false)\n    }\n\n    const onChangeDate = (newValue:Moment | null) => {\n        setValue(newValue !== null ? newValue.format('L') : undefined)\n        setIsEditing(false)\n    }\n\n    \n    if(type === FIELD_TYPE.IMAGE){\n        return (\n            <>\n                <img src={value}/>\n                {isEditing \n                    && <Modal title='Choose image' visible={true} onCancel={() => setIsEditing(false)}>Gallery</Modal>}\n                {!isEditing && hitarea}\n            </>\n        )\n    }\n\n    else if(type === FIELD_TYPE.FILE){\n        return (\n            <>\n                {value}\n                {isEditing \n                    && <Modal title='Choose file' visible={true} onCancel={() => setIsEditing(false)}>File browser</Modal>}\n                {!isEditing && hitarea}\n            </>\n        )\n    }\n\n    else if(type === FIELD_TYPE.COLOR){\n        return (\n            <>\n                <div style={{display:'flex', alignItems:'center', gap:'4px'}}>\n                    {value !== undefined && <div style={{width:'12px', height:'12px', backgroundColor:value}}/>}\n                    {value}  \n                </div>\n                \n                {isEditing \n                    && <Modal \n                        title='Choose color'\n                        visible={true} \n                        width={270} \n                        onCancel={() => {setValue(defaultValue); setIsEditing(false)}} \n                        onOk={() => setIsEditing(false)}\n                    >\n                        <ChromePicker color={value} onChange={val => setValue(val.hex)} onChangeComplete={(val) => setValue(val.hex)}/>\n                    </Modal>}\n                {!isEditing && hitarea}\n            </>\n        )\n    }\n\n    \n    \n\n    \n\n    return isEditing \n        ? <>\n            {options === undefined \n                ? <>\n                    {type === FIELD_TYPE.STRING \n                        && <Input defaultValue={value} ref={inputRef} onBlur={() => setIsEditing(false)} onPressEnter={onPressEnter}/>}\n                    {type === FIELD_TYPE.NUMBER \n                        && <InputNumber defaultValue={value} ref={inputRef} onBlur={() => setIsEditing(false)} onPressEnter={onPressEnter}/>}\n                    {type === FIELD_TYPE.DATE\n                        && <DatePicker defaultOpen={true} defaultValue={value !== '' ? moment(value) : undefined} onBlur={() => setIsEditing(false)} onChange={onChangeDate}/>}\n                </>\n                :<Select defaultValue={value} style={{width:'100%'}} onBlur={() => setIsEditing(false)} onChange={onChange}>\n                    {options.map(option => <Select.Option key={option} value={option}>{option}</Select.Option>)}\n                </Select>}\n            \n        </>\n        : <>\n            {value}\n            {hitarea}\n        </>\n        \n    \n}\n\n\n","import styled from '@emotion/styled'\nimport {css} from '@styled-system/css'\nimport { Table } from 'antd';\nimport { getDataset, players_schema, Schema } from '_mock';\nimport { Button } from 'antd';\nimport { useState } from 'react';\nimport { ColumnsType } from 'antd/lib/table';\nimport * as _ from 'lodash';\nimport generateColumns from 'utils/dataset';\n\n//temp\nimport players from 'services/api/mock/players.json'\nimport ExportOutlined from '@ant-design/icons/lib/icons/ExportOutlined';\nimport ImportOutlined from '@ant-design/icons/lib/icons/ImportOutlined';\nimport PlusOutlined from '@ant-design/icons/lib/icons/PlusOutlined';\nimport MinusSquareOutlined from '@ant-design/icons/lib/icons/MinusSquareOutlined';\nimport SaveOutlined from '@ant-design/icons/lib/icons/SaveOutlined';\n\ninterface DatasetProps {\n    schema:Schema\n    data:any,\n    related?:any,\n    isNested?:boolean,\n    selectedIds?:number[],\n    multiple?:boolean\n}\n\ninterface DatasetSchema {\n    __items:{\n        __type:'object'\n        __items:Schema[]\n    }\n}\n\n\nexport default function Dataset({schema, data, isNested, selectedIds, multiple}:DatasetProps){\n    const [subtable, setSubtable] = useState<{name:string, ids:number[], parentId:number, multiple:boolean}>()\n    const [selectedRowKeys, setSelectedRowKeys] = useState<number[] | undefined>(selectedIds)\n\n    const expand = (name:string, ids:number[], parentId:number, multiple:boolean) => {\n        setSubtable({name, ids, parentId, multiple})\n    }\n\n    const dataSource = data.filter((row:any, i:number) => i< 20 ).map((row:any) => ({...row, key:row.id}))\n    const columns:ColumnsType<any> = generateColumns(schema as DatasetSchema, expand, !!isNested)\n    \n    return (\n        \n            \n        <Styled.Container>\n            {!isNested \n                && <div id='controls'>\n                    <Button disabled={true} icon={<SaveOutlined />}>Save</Button>\n                    <Button icon={<PlusOutlined />}>Add row</Button>\n                    <Button icon={<ImportOutlined />}>Import</Button>\n                    <Button icon={<ExportOutlined />}>Export</Button>\n                </div>\n            }\n            <Styled.Table>\n                <Table\n                    columns={columns}\n                    dataSource={dataSource}\n                    pagination={false}\n                    rowSelection={isNested \n                        ? {\n                            type: multiple ? 'checkbox' : 'radio',\n                            selectedRowKeys:selectedRowKeys?.map((key:number) => String(key)),\n                            onChange: (selectedRowKeys: React.Key[]) => {\n                                setSelectedRowKeys(selectedRowKeys as number[])\n                            }} \n                        : undefined}\n                    scroll={{scrollToFirstRowOnChange:true, y:'360px'}}\n                    size='small'\n                \n                />\n\n                {subtable !== undefined \n                && <div style={{padding:'12px'}}>\n                    <div style={{display:'flex', justifyContent:\"space-between\", gap:'20px', marginTop:'20px'}}>\n                        <h4><i>{`#${subtable.parentId} / ${subtable.name}`}</i></h4>\n                        <div style={{display:'flex', gap:'6px'}}>\n                            <Button disabled={true} icon={<SaveOutlined />}>Save</Button>\n                            <Button icon={<MinusSquareOutlined />} onClick={() => {setSubtable(undefined)}}>collapse</Button>\n                        </div>\n                    </div>\n                    <Dataset \n                        data={getDataset(subtable.name)?.data}\n                        isNested={true} \n                        key={subtable.parentId}\n                        multiple={subtable.multiple} \n                        schema={getDataset(subtable.name)?.schema as Schema}\n                        selectedIds={subtable.ids}\n                    />\n                </div>}\n            </Styled.Table>\n        </Styled.Container>\n    );\n    \n}\n\n\n\nconst Styled = {\n    Container: styled('div')(css({\n        \"#controls\":{\n            display:'flex',\n            justifyContent:'flex-end',\n            gap:'4px',\n            marginBottom:'6px'\n        }\n    })),\n    Table: styled('div')(css({\n        border:'1px solid #d9d9d9', \n        borderRadius: '2px',\n    })),\n}","import { Schema } from \"_mock\";\nimport { Checkbox } from 'antd';\nimport { useState } from \"react\";\nimport Dataset from \"./Dataset\";\nimport { Input } from 'antd';\nimport Datazet from \"./Datazet\";\n\ninterface FieldWrapperProps {\n    attachable:boolean,\n    schema:Schema,\n    data:any\n}\n\nexport default function FieldWrapper({attachable, schema, data}:FieldWrapperProps){\n\n    const [isAttached, setIsAttached] = useState(!attachable)\n\n    if(attachable){\n        return (\n            <div>\n                <Checkbox onChange={() => setIsAttached(prev => !prev)}><h3>{schema.__name}</h3></Checkbox>\n                {isAttached && getFieldByType(schema.__type, schema, data)}\n            </div>\n        )\n    }\n\n    return (\n        <div>\n            {attachable \n                ? <Checkbox onChange={() => setIsAttached(prev => !prev)}><h3>{schema.__name}</h3></Checkbox>\n                :<h3>{schema.__name}</h3>}\n            {isAttached && getFieldByType(schema.__type, schema, data)}\n        </div>\n    )\n}\n\nfunction getFieldByType(type: string, schema:Schema, data:any){\n    if(type === 'array'){\n        return <Dataset schema={schema} data={data}/>\n        //return <Datazet/>\n    }\n    else if(type === 'string'){\n        return <Input placeholder='Enter title here' value={data}/>\n    }\n    return null\n}\n\n","import styled from '@emotion/styled'\nimport {css} from '@styled-system/css'\nimport withPathReader from 'hoc/withPathReader';\nimport { useParams } from 'react-router';\nimport { Anchor, Divider } from 'antd';\n//import DatasetExpandable from 'components/fields/__trash/DatasetExpandable';\nimport { players_schema, title_field, CTA_field, games_schema, teams_schema } from '_mock';\nimport FieldWrapper from 'components/fields/FieldWrapper';\nimport players from 'services/api/mock/players.json'\nimport games from 'services/api/mock/games.json'\nimport teams from 'services/api/mock/teams.json'\n\nconst { Link } = Anchor;\n\n\n\ninterface ScreenProps {\n    prop?:string\n}\n\n\nfunction Edit({prop}:ScreenProps){\n    const {sectionId, screenId} = useParams() \n    const global = (sectionId === undefined)\n\n    const fieldsGlobal = [\n        {schema:players_schema, data:players},\n        {schema:games_schema, data:games},\n        {schema:teams_schema, data:teams}\n    ]\n    const fieldsLocal = [\n        title_field,\n        CTA_field\n    ]\n\n    return(\n        <Styled.Container key={screenId}>\n            \n            <div id='content'>\n                {!global && \n                <>\n                    {fieldsLocal.map(field => <FieldWrapper attachable={false} data={field.data} key={field.schema.__name} schema={field.schema}/>)}\n                    {fieldsGlobal.length > 0 &&\n                        <Divider>Global fields</Divider>}\n                </>}\n                \n                {fieldsGlobal.map(field => <FieldWrapper attachable={!global} data={field.data} key={field.schema.__name} schema={field.schema}/>)}\n                \n            </div>\n            {/*}\n            <Anchor style={{width:'170px', paddingLeft:'32px'}}>\n                {!global && <>\n                    {fieldsLocal.map(field => <Link key={field.schema.__name} href={`#local-${field.schema.__name}`} title={field.schema.__name} />)}\n                    <Link href=\"#global\" title=\"Global fields\">\n                        {fieldsGlobal.map(field => <Link key={field.schema.__name} href={`#global-${field.schema.__name}`} title={field.schema.__name} />)}\n                    </Link>\n                </>}\n                {global && <>\n                    {fieldsGlobal.map(field => <Link href={`#global-${field.schema.__name}`} title={field.schema.__name} />)}\n                </>}  \n            </Anchor>  \n                */}\n        </Styled.Container>\n    )\n}\n\nconst Styled = {\n    Container: styled('div')(css({\n        //display:'grid',\n        gridTemplateColumns:'calc(100% - 170px) 170px',\n        \n        m:'1em',\n        //gap:'1em',\n        \"#content\":{\n            display:'flex',\n            flexDirection:'column',\n            gap:'24px'\n        }\n    }))\n}\n\nexport default withPathReader(Edit)","import styled from '@emotion/styled'\nimport {css} from '@styled-system/css'\nimport withPathReader from 'hoc/withPathReader'\n\ninterface PublishProps {\n    prop?:string\n}\n\n\nfunction Publish({prop}:PublishProps){\n    return(\n        <Styled.Container param={'test'}>\n            publish\n        </Styled.Container>\n    )\n}\n\nconst Styled = {\n    Container: styled('div')(({param}:{param:string}) => css({\n\n    })),\n    PureContainer: styled('div')(css({\n\n    }))\n}\n\nexport default withPathReader(Publish)","import styled from '@emotion/styled'\nimport {css} from '@styled-system/css'\nimport withPathReader from 'hoc/withPathReader'\n\ninterface ScheduleProps {\n    prop?:string\n}\n\nfunction Schedule({prop}:ScheduleProps){\n    return(\n        <Styled.Container param={'test'}>\n            schedule\n        </Styled.Container>\n    )\n}\n\nconst Styled = {\n    Container: styled('div')(({param}:{param:string}) => css({\n\n    })),\n    PureContainer: styled('div')(css({\n\n    }))\n}\n\n\nexport default withPathReader(Schedule)","import styled from '@emotion/styled'\nimport {css} from '@styled-system/css'\nimport withPathReader from 'hoc/withPathReader'\nimport { useParams } from 'react-router-dom'\n\ninterface FilesProps {\n    prop?:string\n}\n\nfunction Files({prop}:FilesProps){\n    const {sectionId, screenId} = useParams() \n    const global = (sectionId === undefined)\n\n    return(\n        <Styled.Container param={'test'}>\n            files\n        </Styled.Container>\n    )\n}\n\nconst Styled = {\n    Container: styled('div')(({param}:{param:string}) => css({\n\n    })),\n    PureContainer: styled('div')(css({\n\n    }))\n}\n\nexport default withPathReader(Files)","import AuthProvider from \"hoc/auth-provider/AuthProvider\";\nimport Layout from \"components/layout/Layout\"\nimport { Routes, Route, Link } from \"react-router-dom\";\nimport Edit from 'components/pages/Edit'\nimport Publish from \"./pages/Publish\";\nimport Schedule from \"./pages/Schedule\";\nimport Files from \"./pages/Files\";\n\n\nexport default function App(){\n    return(\n        <AuthProvider>\n            <Layout>\n                <Routes>\n                    <Route element={<div>landing page</div>} path=\"/\" />\n                    <Route path=\":sectionId\">\n                        <Route path=\"edit\">\n                            <Route element={<Edit/>} path=\":screenId\"/>\n                        </Route>\n                        <Route element={<Publish/>} path=\"publish\"/>\n                        <Route element={<Schedule/>} path=\"schedule\"/>\n                        <Route element={<Files/>} path=\"files\"/>\n                    </Route>\n                    <Route element={<Files/>} path=\"files\"/>\n                    <Route element={<Edit/>} path=\"data\"/>\n                    <Route element={<div>not found</div>} path=\"*\" />\n                </Routes>\n            </Layout>\n        </AuthProvider>\n    )\n}\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport { BrowserRouter } from \"react-router-dom\";\nimport './global.css';\nimport 'antd/dist/antd.css'\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}